#!/usr/bin/env ruby

$:.unshift("lib")
require 'colorize'
require 'digest/md5'
require 'formats_lines'
require 'formats_tests'
require 'sml_file'
require 'test_output'
require 'test'
require 'test_output_presenter'
require 'looks_for_mosml'

class Runner
  def self.main(input)
    if LooksForMosml.installed?
      new(input)
    else
      puts "Moscow ML most be installed"
      exit 1
    end
  end

  def initialize(input)
    ensure_correct_input(input)
    @input = input

    @file = SmlFile.new(@input, formatters: [FormatsLines, FormatsTests]).prepare_tests

    tmp_file_name = random_name

    @file.save_as!(tmp_file_name + ".sml")

    @file.compile!(random_name + ".exe")

    output = TestOutput.new(@file.run.split("\n"))
    puts TestOutputPresenter.parse(output)
  rescue SmlFile::CannotCompile => e
    output = TestOutput.new(e.message.split("\n"))
    puts TestOutputPresenter.parse(output).gsub(tmp_file_name+".sml", @input)
  ensure
    clean_up!(input)
  end

  private

  def clean_up!(input)
    if valid_file_input(input)
      [".uo", ".ui", ".exe"].each do |s|
        FileUtils.rm_f(File.basename(@file.path, ".*") + s)
      end

      @file.delete!
    end
  end

  def random_name
    Digest::MD5.hexdigest(Time.now.to_s)
  end

  def ensure_correct_input(input)
    unless valid_file_input(input)
      puts "Gimme an sml file, that exists!"
      exit 2
    end
  end

  def valid_file_input(input)
    input && !input.empty? && File.exists?(input) && File.extname(input) == ".sml"
  end
end

Runner.main(ARGV.first)
